#!/bin/bash
#__________________________________________________________
# Author:     phillips321 contact through phillips321.co.uk
# License:    CC BY-SA 3.0
# Use:        All in one pentest script designed for bt5
# Released:   www.phillips321.co.uk
  version=3.3
# Dependencies:
#	nmap
#	sslscan
#	gnome-web-photo
#	arp-scan
#	dialog
#	amap
#	tree
#	onesixtyone v0.8 (included with svn checkout)
#	enum4linux and polenum  (included with svn checkout)
# 	make sure polenum is in your path and enum4linux points to enum4linux.pl
# backtrack users can apt-get install sslscan gnome-web-photo arp-scan dialog tree
#
# ToDo:
#  add xmal to output from here: http://www.pentesticles.com/2012/05/we-have-port-scans-what-now.html
#	ensure snmp get follows correct port
#	stop gwp from taking screenies of 3389/tcp
#	add ability to launch nesssus against targets
#	check if gnome-web-photo can follow redirects
# ChangeLog:
#	v3.3 - added custom onesixty one to scan custom ports
#	v3.2 - fixed issue with target directory 
#	v3.1 - each host now has it's own scan folder for neatness
#	v3.0 - replaced nbtscan with enum4linux
#		- added enum4linux-0.8.8 and polenum-0.2
#	v2.9 - added 80 to custom tcp ports
#		- removed delay after opening openports, weakciphers, etc...
#		- scansource.txt now in outputdir as opposed to startdir
#	v2.8 - copy targets.txt into output folder and added scansource.txt
#	v2.7 - fixed error with snmpscan returning with "Host responded with error NO SUCH NAME"
#	v2.6 - added nfs tree output
#	v2.5 - fixed vlanports.txt output to remove A-Z
#	v2.4 - added uniscan to automate some web tests
#	v2.3 - added swaks to auto test for relay on smtp
#	v2.2 - added option to display md5 signed certificate hashes
#	v2.1 - fixed bug creating open_ports.txt where no ports were found (now also shows which scan size was used to create open_ports.txt)
#	v2.0 - removed duplicate entries in open_ports.txt (see end of f_nmapscans function)
#		 - changed Cancel button to Exit
#		 - removed Cancel button from some dialog windows (such as pause and threads)
#		 - THREADS xterm window now closes when scans are completed
#	v1.8 - fixed issue with searching for running threads
#		 - removed duplicates from SNMPCommunityStrings.txt
#	v1.7 - deleted temp before starting scans
#	v1.6 - Changed xterm font to make nmap windows smaller
#	v1.5 - Fixed snmp scans (amap not identifying snmp service)
#	v1.4 - added  (n of X) scanned to progress dialog
#	v1.3 - cleanup after nbtscan (removes scans with no response)
#	v1.2 - added vlan_ports.txt to show all ports(TCP+UDP found (for ACL testing and import to nessus)
#	v1.1 - made scan windows smaller using geometry 80x10
#	v1.0 - Can now change number of threads on the fly using the popup xterm
#	v0.6 - COUNT++ improved on nmap scans to be more accurate
# 	v0.5 - offers to create targets.txt if it's now found
#		 - cleans up nmap output if scan was cancelled
#	v0.4 - addition of custom nmap port scan
#	v0.3 - comments on all functions
#	v0.2 - Caught ESC/Cancel signals to quit program
#	v0.1 - First write
#___________________________________________________________
f_setdefaults(){ #defaults for running the script
	NMAPTCP="nmap -sS -vv -d -A -Pn -n -r -oA" # this needs to finish with -oA and cannot include -p
	NMAPUDP="nmap -sU -vv -d -A -Pn -n -r -oA" # this needs to finish with -oA and cannot include -p
	NMAPTCPCUSTOMPORTS="21,22,23,25,50,80,135,139,199,443,445,1556,2301,2381,3181,3389,8080,8081,47001"
	NMAPUDPCUSTOMPORTS="7,13,17,19,53,69,111,123,135,137,161,500,1434,2049,5353,8161"
	XTERMVALS="-fn -*-*-*-*-*-*-7-*-*-*-*-*-*-* -geometry 80x10"
	onesixtyone=`which pentest.sh | sed -e "s/pentest.sh/onesixtyone-0.8\/onesixtyone/"`
	enum4linux=`which pentest.sh | sed -e "s/pentest.sh/enum4linux-0.8.8\/enum4linux.pl/"`
		#make sure polenum-0.2 is also in your path
	NMAPTCPDEFAULT=0
	NMAPTCPALL=0
	NMAPTCPCUSTOM=0
	NMAPUDPDEFAULT=0
	NMAPUDPALL=0
	NMAPUDPCUSTOM=0
	RUNARPSCAN=0
	RUNNMAP=0
	RUNAMAP=0
	RUNSSLSCAN=0
	RUNGWP=0
	RUNSNMPSCAN=0
	RUNSNMPGET=0
	RUNENUM4LINUXSCAN=0
	RUNSWAKS=0
	RUNUNISCAN=0
	RUNNFSSCAN=0
	RUNNING=0
	THREADS=10
	rm /tmp/answer
	rm /tmp/threadsout ; echo 10 > /tmp/threads
	rm /tmp/exitvalue ; echo 0 > /tmp/exitvalue
	rm /tmp/threads ; echo 10 > /tmp/threads
}
f_main(){ #this is the main bulk of the program that calls the scans
	dialog --title "Scan Types" --separate-output --output-fd 2 --checklist "What do you want to run? Scan selections are dependent on the scan type above it being run first. For example, you cannot run sslscan if anamp and nmap have not been run prior." 0 0 0 \
		arpscan "run arp-scan to create targets.txt" off \
		nmap "nmap targets" on \
		amap "amap ports found using nmap" off \
		sslscan "sslscan targets" off \
		gwp "Take photo of web pages found?" off \
		snmpscans "Check for default SNMP community strings" off \
        snmpget "Get data from SNMP services using known strings" off \
        enum4linux "Run enum4linux against targets" off \
        smtp "connect to SMTP to check if they allow relaying of mail" off \
        uniscan "run uniscan against HTTP(s) ports" off \
        nfsscan "connect to nfs services and list contents" off \
	2> /tmp/answer
	case $? in 1|255) : do ; f_exit ;; esac
	checklist=`cat /tmp/answer`
	for opt in ${checklist}
    do
		case ${opt} in
			arpscan) : do ; RUNARPSCAN=1 ;;
			nmap) : do ; RUNNMAP=1 ;;
			amap) : do ; RUNAMAP=1 ;;
			sslscan) : do ; RUNSSLSCAN=1 ;;
			gwp) : do ; RUNGWP=1 ;;
			snmpscans) : do ; RUNSNMPSCAN=1 ;;
			snmpget) : do ; RUNSNMPGET=1 ;;
			enum4linux) : do ; RUNENUM4LINUXSCAN=1 ;;
			smtp) : do ; RUNSWAKS=1 ;;
			uniscan) : do ; RUNUNISCAN=1 ;;
			nfsscan) : do ; RUNNFSSCAN=1 ;;
		esac
	done
	dialog --title "Where would you like the output to go?" --dselect "`pwd`/output" 0 0 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac ; OUTPUTDIR=`cat /tmp/answer` ;
	f_directorycheck
	cp targets.txt ${OUTPUTDIR}/targets.txt
	dialog --title "Threads" --inputbox "How many threads would you like to run?" 0 0 10 2> /tmp/threads ; case $? in 1|255) : do ; f_exit ;; esac ; THREADS=`cat /tmp/threads`
	f_threads & 
	if [ ${RUNARPSCAN} = "1" ] ; then f_arpscan ; fi
	if [ ${RUNNMAP} = "1" ] ; then f_nmapoptions ; f_nmapscans ; fi
	if [ ${RUNAMAP} = "1" ] ; then f_amapscans ; fi
	if [ ${RUNSSLSCAN} = "1" ] ; then f_sslscans ; fi
	if [ ${RUNGWP} = "1" ] ; then f_gwp ; fi
	if [ ${RUNSNMPSCAN} = "1" ] ; then f_snmpscan ; fi
	if [ ${RUNSNMPGET} = "1" ] ; then f_snmpget ; fi
	if [ ${RUNENUM4LINUXSCAN} = "1" ] ; then f_runenum4linuxscan ; fi
	if [ ${RUNSWAKS} = "1" ] ; then f_swaksscans ; fi
	if [ ${RUNUNISCAN} = "1" ] ; then f_uniscan ; fi
	if [ ${RUNNFSSCAN} = "1" ] ; then f_nfsscan ; fi
}
f_debug(){ #this is debug information (insert f_debug in the script to pause)
	echo "checklist = ${checklist}"
	echo "NMAPTCPDEFAULT=${NMAPTCPDEFAULT}"
	echo "NMAPTCPALL=${NMAPTCPALL}"
	echo "NMAPTCPCUSTOM=${NMAPTCPCUSTOM}"
	echo "NMAPTCPCUSTOMPORTS=${NMAPTCPCUSTOMPORTS}"
	echo "NMAPUDPDEFAULT=${NMAPUDPDEFAULT}"
	echo "NMAPUDPALL=${NMAPUDPALL}"
	echo "NMAPUDPCUSTOM=${NMAPUDPCUSTOM}"
	echo "NMAPUDPCUSTOMPORTS=${NMAPUDPCUSTOMPORTS}"
	echo "Number of scantypes = $((${NMAPTCPDEFAULT}+${NMAPTCPALL}+${NMAPTCPCUSTOM}+${NMAPUDPDEFAULT}+${NMAPUDPALL}+${NMAPUDPCUSTOM}))"
	echo "Output directory = ${OUTPUTDIR}"
	echo "Number of threads = ${THREADS}"
	echo "RUNARPSCAN = ${RUNARPSCAN}"
	echo "RUNNMAP = ${RUNNMAP}"
	echo "RUNAMAP = ${RUNAMAP}"
	echo "RUNSSLSCAN = ${RUNSSLSCAN}"
	echo "RUNGWP = ${RUNGWP}"
	echo "RUNSNMPSCAN = ${RUNSNMPSCAN}"
	echo "RUNSNMPGET = ${RUNSNMPGET}"
	echo "RUNENUM4LINUXSCAN = ${RUNENUM4LINUXSCAN}"
	echo "COUNT = ${COUNT}"
	echo "NUMBER = ${NUMBER}"
	echo "THREADSPID = ${THREADSPID}"
	read -p "pause"
}
f_directorycheck(){ #creates dir if it's not prCISCOesent
	if [ -d ${OUTPUTDIR} ] ; then sleep 0 ; else mkdir ${OUTPUTDIR} ; fi
	ifconfig eth0 > ${OUTPUTDIR}/scansource.txt ; route -n >> ${OUTPUTDIR}/scansource.txt
}
f_arpscan(){ #creates targets.txt and then allows editing
	if [ -s targets.txt ] 
	then
		dialog --title "ERROR:" --nocancel --pause "targets.txt already exists. Please delete it from the working directory if you wish to create a new one using this script" 10 60 5 ; clear
	else
		dialog --title "ARPSCAN" --infobox "We are now scanning the local subnet for devices using arp-scan" 0 0
		arp-scan -l -g | grep . | cut -f1 | grep -v packets |grep -v Interface | grep -v Ending | grep -v Starting | sort -nb | uniq > `pwd`/targets.txt
	fi
	dialog --title "Please edit the targets.txt file" --cancel-label "Exit" --editbox "`pwd`/targets.txt" 0 0 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac
	cp /tmp/answer `pwd`/targets.txt
	cp `pwd`/targets.txt ${OUTPUTDIR}/targets.txt
}
f_nmapoptions(){ #determins what typoe of nmap scans you want
	dialog --title "nmap options" --cancel-label "Exit" --separate-output --output-fd 2 --checklist "What do you want to run" 0 0 0 \
		nmaptcpdefault "Run SYN scan against DEFAULT TCP ports?" on \
		nmaptcpall "Run SYN scan against ALL TCP ports?" on \
		nmaptcpcustom "Run SYN scan against CUSTOM TCP ports?" on \
		nmapudpdefault "Run UDP scan against DEFAULT UDP ports?" on \
		nmapudpall "Run UDP scan against ALL UDP ports (SLOW!)?" off \
		nmapudpcustom "Run UDP scan against CUSTOM UDP ports?" on \
		2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac
	result=`cat /tmp/answer` && rm /tmp/answer ; clear
	for opt in ${result}
	do
		case ${opt} in
			nmaptcpdefault) : do ; NMAPTCPDEFAULT=1  ;;
			nmaptcpall) : do ; NMAPTCPALL=1  ;;
			nmaptcpcustom) : do ; NMAPTCPCUSTOM=1 ;;
			nmapudpdefault) : do ; NMAPUDPDEFAULT=1  ;;
			nmapudpall) : do ; NMAPUDPALL=1  ;;
			nmapudpcustom) : do ; NMAPUDPCUSTOM=1 ;;
		esac
	done
	if [ ${NMAPTCPCUSTOM} = "1" ]
	then
		dialog --title "NMAP Custom TCP Ports" --cancel-label "Exit" --inputbox "Please enter the TCP ports you would like to scan seperated by a comma:" 0 0 ${NMAPTCPCUSTOMPORTS} 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac ; NMAPTCPCUSTOMPORTS=`cat /tmp/answer`
	fi
	if [ ${NMAPUDPCUSTOM} = "1" ]
	then
		dialog --title "NMAP Custom UDP Ports" --cancel-label "Exit" --inputbox "Please enter the UDP ports you would like to scan seperated by a comma:" 0 0 ${NMAPUDPCUSTOMPORTS} 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac ; NMAPUDPCUSTOMPORTS=`cat /tmp/answer`
	fi
}
f_threads(){ #pops up an small window to control the number of threads
	exitvalue=0
	while [ ${exitvalue} != 1 ]
	do
		xterm -title 'THREADS' -geometry 36x13 -e 'THREADS=`cat /tmp/threads` ; dialog --nocancel --title "THREADS" --inputbox "Currently running ${THREADS} threads, enter a new value here to change it:" 0 0 ${THREADS} 2> /tmp/threadsout ; case $? in 1|255) : do ; echo 1 > /tmp/exitvalue ;; esac ; cp /tmp/threadsout /tmp/threads'
		exitvalue=`cat /tmp/exitvalue`
	done
}
f_nmapscans(){ #nmap scans of targets
	COUNT=0	
	NUMBER=$(((`cat targets.txt| wc -l`)*$((${NMAPTCPDEFAULT}+${NMAPTCPALL}+${NMAPTCPCUSTOM}+${NMAPUDPDEFAULT}+${NMAPUDPALL}+${NMAPUDPCUSTOM}))))
	if [ -s targets.txt ] ; then sleep 0 ; else dialog --title "ERROR:" --nocancel --pause "targets.txt not found in current directory, we'll create one..." 10 60 5 ; f_arpscan ; fi
	for i in `cat targets.txt`
	do
		THREADS=`cat /tmp/threads`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NMap Progress - started ${COUNT} of ${NUMBER} scans" 6 80
		TARGET=${i}
		LOC=${OUTPUTDIR}/${TARGET}
		if [ -d ${LOC} ] ; then sleep 0 ; else mkdir ${LOC} ; fi
		if [ ${NMAPTCPDEFAULT} = "1" ] ; then ((COUNT++)); sleep 1; xterm ${XTERMVALS} -title "${TARGET} small TCP" -e "${NMAPTCP} ${LOC}/small.tcp ${TARGET}" & fi
		if [ ${NMAPTCPALL} = "1" ] ; then ((COUNT++)); sleep 1; xterm ${XTERMVALS} -title "${TARGET} big TCP" -e "${NMAPTCP} ${LOC}/big.tcp -p1-65535 ${TARGET}" & fi
		if [ ${NMAPTCPCUSTOM} = "1" ] ; then ((COUNT++)); sleep 1; xterm ${XTERMVALS} -title "${TARGET} custom TCP" -e "${NMAPTCP} ${LOC}/custom.tcp -p${NMAPTCPCUSTOMPORTS} ${TARGET}" & fi
		if [ ${NMAPUDPDEFAULT} = "1" ] ; then ((COUNT++)); sleep 1; xterm ${XTERMVALS} -title "${TARGET} small UDP" -e "${NMAPUDP} ${LOC}/small.udp ${TARGET}" & fi
		if [ ${NMAPUDPALL} = "1" ] ; then ((COUNT++)); sleep 1; xterm ${XTERMVALS} -title "${TARGET} big UDP" -e "${NMAPUDP} ${LOC}/big.udp -p1-65535 ${TARGET}" & fi
		if [ ${NMAPUDPCUSTOM} = "1" ] ; then ((COUNT++)); sleep 1; xterm ${XTERMVALS} -title "${TARGET} custom UDP" -e "${NMAPUDP} ${LOC}/custom.udp -p${NMAPUDPCUSTOMPORTS} ${TARGET}" & fi
		while [ `ps -Aef --cols 400 | grep ${OUTPUTDIR} | grep xterm | wc -l` -ge ${THREADS} ]
			do
			THREADS=`cat /tmp/threads`
			sleep 1
		done
		sleep 5		
	done
	while [ `ps -Aef --cols 400 | grep ${OUTPUTDIR} | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 400 | grep ${OUTPUTDIR} | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NMap Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
		sleep 1
	done
	# delete scans that were cancelled during running
	cd "${OUTPUTDIR}"
	for i in `ls */*.gnmap`;do wcl=`cat ${i} | wc -l`;if [ ${wcl} -le 2 ];then rm ${i};fi;done 
	for i in `ls */*.xml`;do wcl=`cat ${i} | wc -l`;if [ ${wcl} -le 15 ];then rm ${i};fi;done
	for i in `ls */*.nmap`;do wcl=`cat ${i} | wc -l`;if [ ${wcl} -le 1 ];then rm ${i};fi;done
	
	# create open_ports.txt containing only 1 tcp and 1 udp scan from each IP in order of size (big>small>custom)
	if [ -s open_ports.txt ] ; then rm open_ports.txt ; fi
	for i in `ls */*.nmap | cut -d"/" -f1 | sort -u`
	do
		echo "###################### ${i} RESULTS ######################" >> open_ports.txt
		if [ -f ${i}/big.tcp.nmap ]
		then
			echo "---------------------- TCP Big------------------------------" >> open_ports.txt
			cat ${i}/big.tcp.nmap | grep "open" | grep -v "OSScan" | grep -v "filtered" >> open_ports.txt
		elif [ -f ${i}/small.tcp.nmap ]
		then 
			echo "---------------------- TCP Small------------------------------" >> open_ports.txt
			cat ${i}/small.tcp.nmap | grep "open" | grep -v "OSScan" | grep -v "filtered" >> open_ports.txt
		elif [ -f ${i}/custom.tcp.nmap ]
		then
			echo "---------------------- TCP Custom------------------------------" >> open_ports.txt
			cat *${i}/custom.tcp.nmap | grep "open" | grep -v "OSScan" | grep -v "filtered" >> open_ports.txt
		else
			echo "no results" >> open_ports.txt
		fi
		if [ -f ${i}/big.udp.nmap ]
		then
			echo "---------------------- UDP Big------------------------------" >> open_ports.txt
			cat ${i}/big.udp.nmap | grep "open" | grep -v "OSScan" | grep -v "filtered" >> open_ports.txt
		elif [ -f ${i}/small.udp.nmap ]
		then 
			echo "---------------------- UDP Small------------------------------" >> open_ports.txt
			cat ${i}/small.udp.nmap | grep "open" | grep -v "OSScan" | grep -v "filtered" >> open_ports.txt
		elif [ -f ${i}/custom.udp.nmap ]
		then 
			echo "---------------------- UDP Custom------------------------------" >> open_ports.txt
			cat *${i}/custom.udp.nmap | grep "open" | grep -v "OSScan" | grep -v "filtered" >> open_ports.txt
		else
			echo "no results" >> open_ports.txt
		fi
		echo ""  >> open_ports.txt
	done
	cat open_ports.txt | grep open | cut -f1 -d"/" | sort -u | grep -v fingerprint | grep -v "|" | sed ':a;N;$!ba;s/\n/,/g' | tr -cd '[0123456789,]' > vlan_ports.txt
	cd -
}
f_amapscans(){ #amap scans (of nmap output)
	cd "${OUTPUTDIR}"
	COUNT=0
	NUMBER=`ls */*.gnmap | sed -e "s/.gnmap//" | wc -l`
	for i in `ls */*.gnmap | sed -e "s/.gnmap//"`
	do
		THREADS=`cat /tmp/threads`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "AMap Progress - started ${COUNT} of ${NUMBER} scans" 6 80
		((COUNT++)); xterm ${XTERMVALS} -title "${i} AMAP" -e "amap -i ${i}.gnmap -o ${i}.amap | tee -a amap_full.txt" &
		while [ `ps -Aef --cols 400 | grep AMAP | grep xterm | wc -l` -ge ${THREADS} ]
		do
			THREADS=`cat /tmp/threads`
			sleep 1
		done
		sleep 1
	done
	while [ `ps -Aef --cols 400 | grep AMAP | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 400 | grep AMAP | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "AMap Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
		sleep 1
	done
	cat amap_full.txt | cut -d" " -f3,4,5 | grep matches | sort -n | uniq > amap.txt
	cat amap.txt | grep http | cut -d"/" -f 1 | sort | uniq > amap.http.txt
	cat amap.txt | grep ssl | cut -d"/" -f 1 | sort | uniq > amap.ssl.txt
	cat amap_full.txt | cut -d" " -f3,4,5 | grep 161/udp | cut -d"/" -f1 | sort -u > amap.snmp.txt
	cat amap.txt | grep smtp | cut -d"/" -f 1 | sort | uniq > amap.smtp.txt 
	cat amap.txt | grep nfs | cut -d"/" -f 1 | sort | uniq > amap.nfs.txt 
	#rm amap_full.txt
	cd -
}
f_sslscans(){ #sslscans of ssl services (using amap output)
	cd "${OUTPUTDIR}"
	if [ -s amap.ssl.txt ]
	then
	COUNT=0
	NUMBER=`cat amap.ssl.txt | wc -l`
		for i in `cat amap.ssl.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SSL Scan Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			HOST=`echo $i | cut -d":" -f1`
			PORT=`echo $i | cut -d":" -f2` 
			((COUNT++)); xterm ${XTERMVALS} -title "${i} SSLSCAN" -e "sslscan --no-failed ${i} | tee ${HOST}/${PORT}.sslscan.txt; sleep 5" &
			while [ `ps -Aef --cols 400 | grep SSLSCAN | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
		sleep 1
		done
		while [ `ps -Aef --cols 400 | grep SSLSCAN | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 400 | grep SSLSCAN | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SSL Scan Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
			sleep 1
		done
		cat */*.sslscan.txt | grep "Testing\ SSL\|Accepted\|ERROR\|Signature\ Algorithm" | grep "SSLv2\|Testing\|\ 40\|\ 56\|md5" | grep -v "ERROR" > WeakCiphers.txt
	fi
	cd -
}
f_gwp(){ #takes photos of http(s) web site roots (using amap output)
	cd "${OUTPUTDIR}"
	if [ -s amap.ssl.txt ]
	then
	COUNT=0
	NUMBER=`cat amap.ssl.txt | wc -l`
		for i in `cat amap.ssl.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "GWP-SSL Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			HOST=`echo $i | cut -d":" -f1`
			PORT=`echo $i | cut -d":" -f2` 
			((COUNT++)); xterm ${XTERMVALS} -title "${i} GNOME-WEB-PHOTO" -e "gnome-web-photo -t 20 -w 1024 -m photo -f --format=png https://${i} ${HOST}/${PORT}_https.png" &
			while [ `ps -Aef --cols 400 | grep GNOME | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
			sleep 1
		done
	fi
	if [ -s amap.http.txt ] 
	then
	COUNT=0
	NUMBER=`cat amap.http.txt | wc -l`
		for i in `cat amap.http.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "GWP-HTTP Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			HOST=`echo $i | cut -d":" -f1`
			PORT=`echo $i | cut -d":" -f2` 
			((COUNT++)); xterm ${XTERMVALS} -title "${i} GNOME-WEB-PHOTO" -e "gnome-web-photo -m photo -f --format=png ${i} ${HOST}/${PORT}__http.png" &
			while [ `ps -Aef --cols 400 | grep GNOME | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
			sleep 1
		done
	fi
	while [ `ps -Aef --cols 400 | grep GNOME | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 400 | grep GNOME | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "GWP Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
		sleep 1
	done
	sleep 1
	cd -
}
f_snmpscan(){ #checks for default community strings (using amap output)
	cd "${OUTPUTDIR}"
	which pentest.sh; retval=`echo $?`
	if [ ${retval} = 0 ]
	then DICT=`which pentest.sh | sed -e "s/pentest.sh/onesixtyone-0.8\/dict.txt/"`
	else DICT="/pentest/enumeration/snmp/onesixtyone/dict.txt"
	fi
	if [ -s amap.snmp.txt ] 
	then
		COUNT=0
		NUMBER=`cat amap.snmp.txt | wc -l`
		for i in `cat amap.snmp.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Scan Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			HOST=`echo $i | cut -d":" -f1`
			PORT=`echo $i | cut -d":" -f2` 
			((COUNT++)); xterm ${XTERMVALS} -title "${i}_${PORT} SNMPSCAN" -e "${onesixtyone} -c ${DICT} -p ${PORT} ${HOST} | tee ${HOST}/${PORT}_snmpscan.txt; sleep 5" &
			while [ `ps -Aef --cols 400 | grep SNMPSCAN | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
		sleep 1
		done
		while [ `ps -Aef --cols 400 | grep SNMPSCAN | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 400 | grep SNMPSCAN | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Scan Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
			sleep 1
		done
	fi
	cat */*_snmpscan.txt | grep -v Scanning | grep -v error | sort | uniq > SNMPCommunityStrings.txt
	cd -
}
f_snmpget(){ #collects data from snmp services  (using snmpscan output)
	cd "${OUTPUTDIR}"
	if [ -s SNMPCommunityStrings.txt ] 
	then
		COUNT=0
		NUMBER=`cat SNMPCommunityStrings.txt | wc -l`
		for i in `cat SNMPCommunityStrings.txt | cut -f1,2 -d" " | sed -e "s/ //"`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Get Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			HOST=`echo $i | cut -f1 -d"["`
			string=`echo $i | cut -f2 -d"[" | sed -e "s/]//"`
			((COUNT++)); xterm ${XTERMVALS} -title "${HOST} SNMPGET" -e "snmpwalk -v2c -c ${string} ${HOST} | tee ${HOST}/snmpget.txt; sleep 5" &
			while [ `ps -Aef --cols 400 | grep SNMPGET | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
		sleep 1
		done
		while [ `ps -Aef --cols 400 | grep SNMPGET | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 400 | grep SNMPGET | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Get Progress - No more left to start, nwaiting for ${RUNNING} scans to finish" 6 80
			sleep 1
		done
	fi
	cd -
}
f_runenum4linuxscan(){ #enum4linux against targets
	cd "${OUTPUTDIR}"
	sleep 1
	COUNT=0
	NUMBER=`cat targets.txt | wc -l`
	for i in `cat targets.txt`
	do
		THREADS=`cat /tmp/threads`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "Enum4Linux Progress - started ${COUNT} of ${NUMBER} scans" 6 80
		((COUNT++)); xterm ${XTERMVALS} -title "${i} Enum4Linux" -e "${enum4linux} ${i} | tee ${i}/enum4linux.txt; sleep 5" &
		while [ `ps -Aef --cols 400 | grep Enum4Linux | grep xterm | wc -l` -ge ${THREADS} ]
		do
			THREADS=`cat /tmp/threads`
			sleep 1
		done
	sleep 1
	done
	while [ `ps -Aef --cols 400 | grep Enum4Linux | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 400 | grep Enum4Linux | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "Enum4Linux Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
		sleep 1
	done
	cd -
}
f_swaksscans(){ #swaks test against smtp (using amap output)
	cd "${OUTPUTDIR}"
	if [ -s amap.smtp.txt ] 
	then
	COUNT=0
	NUMBER=`cat amap.smtp.txt | wc -l`
		for i in `cat amap.smtp.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "Swaks SMTP Progress - started ${COUNT} of ${NUMBER} tests" 6 80
			HOST=`echo $i | cut -d":" -f1`
			PORT=`echo $i | cut -d":" -f2` 
			((COUNT++)); xterm ${XTERMVALS} -title "${i} SWAKS" -e "/pentest/enumeration/smtp/swaks/swaks --to user@example.com --server ${i} | tee ${HOST}/${PORT}_smtp.txt; sleep 5" &
			while [ `ps -Aef --cols 400 | grep SWAKS | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
		sleep 1
		done
		while [ `ps -Aef --cols 400 | grep SWAKS | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 400 | grep SWAKS | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "Swaks SMTP Progress - No more left to start, waiting for ${RUNNING} tests to finish" 6 80
			sleep 1
		done
	fi	
	cd - 
}
f_uniscan(){ #run basic checks against web servers
	cd "${OUTPUTDIR}"
	if [ -s amap.ssl.txt ] 
	then
	COUNT=0
	NUMBER=`cat amap.ssl.txt | wc -l`
		for i in `cat amap.ssl.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "UNISCAN Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			HOST=`echo $i | cut -d":" -f1`
			PORT=`echo $i | cut -d":" -f2`  
			((COUNT++)); xterm ${XTERMVALS} -title "${i} UNISCAN" -e "cd /pentest/web/uniscan/ ; ./uniscan.pl -u https://${i}/ -qweds | tee ${OUTPUTDIR}/${HOST}/${PORT}_uniscan.txt" &
			while [ `ps -Aef --cols 400 | grep UNISCAN | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
			sleep 1
		done
	fi
	if [ -s amap.http.txt ]
	then
	COUNT=0
	NUMBER=`cat amap.http.txt | wc -l`
		for i in `cat amap.http.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "Uniscan Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			HOST=`echo $i | cut -d":" -f1`
			PORT=`echo $i | cut -d":" -f2`  
			((COUNT++)); xterm ${XTERMVALS} -title "${i} UNISCAN" -e "cd /pentest/web/uniscan/ ; ./uniscan.pl -u http://${i}/ -qweds | tee ${OUTPUTDIR}/${HOST}/${PORT}_uniscan.txt" &
			while [ `ps -Aef --cols 400 | grep UNISCAN | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
			sleep 1
		done
	fi
	while [ `ps -Aef --cols 400 | grep UNISCAN | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 400 | grep UNISCAN | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "Uniscan - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
		sleep 1
	done
	sleep 1
	cd -
}
f_nfsscan(){ #connect to nfs and run tree output
	cd "${OUTPUTDIR}"
	if [ -s amap.nfs.txt ] 
	then
	COUNT=0
	NUMBER=`cat amap.nfs.txt | wc -l`
		for i in `cat amap.nfs.txt | cut -d":" -f1`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NFS Tree Progress - started ${COUNT} of ${NUMBER} tests" 6 80
			((COUNT++)); 
			for f in `showmount -e ${i} | cut -d" " -f1 | grep -v "Export"`
			do
				mkdir -p /tmp/nfs${f}
				mount -o nolock,ro -t nfs ${i}:${f} /tmp/nfs${f}
				xterm ${XTERMVALS} -title "${i} NFS Tree" -e "tree /tmp/nfs${f} | tee -a ${i}/nfs.txt" &
			done

			while [ `ps -Aef --cols 400 | grep "NFS Tree" | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
		sleep 1
		done
		while [ `ps -Aef --cols 400 | grep "NFS Tree" | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 400 | grep "NFS Tree" | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NFS Tree Progress - No more left to start, waiting for ${RUNNING} tests to finish" 6 80
			sleep 1
		done
		for i in `cat amap.nfs.txt | cut -d":" -f1`
		do
			for a in `mount | grep $i | cut -d" " -f1`
			do
				umount ${a}
			done
		done
	fi	
	cd - 
}
f_cleanup(){ #deletes files created that are empty or blank
	cd "${OUTPUTDIR}"
	for i in `ls */*.png`
	do
		iSIZE=`stat -c %s ${i}`
		if [ ${iSIZE} -eq "469" ] ; then rm ${i} ; fi
	done
	if [ -s amap.ssl.txt ] ; then sleep 0 ; else rm amap.ssl.txt ; fi
	if [ -s amap.http.txt ] ; then sleep 0 ; else rm amap.http.txt ; fi
	if [ -s WeakCiphers.txt ] ; then sleep 0 ; else rm WeakCiphers.txt ; fi
	if [ -s SNMPCommunityStrings.txt ] ; then sleep 0 ; else rm SNMPCommunityStrings.txt ; fi
	if [ -s amap.snmp.txt ] ; then sleep 0 ; else rm amap.snmp.txt ; fi
	if [ -s amap.smtp.txt ] ; then sleep 0 ; else rm amap.smtp.txt ; fi
	for i in `ls */enum4linux.txt`;do wcl=`cat ${i} | wc -l`;if [ ${wcl} -le 30 ];then rm ${i};fi;done
	if [ -s amap.nfs.txt ] ; then sleep 0 ; else rm amap.nfs.txt ; fi
	cd -
}
f_displayresults(){ #displays output in xterm windows
	cd "${OUTPUTDIR}"
	if [ -s open_ports.txt ] ; then xterm -title "OpenPorts from ${OUTPUTDIR}" -e "grep -E --color=always '.*(ssh|rdp|ssl|http|telnet|https|sslv2|mail|smtp|snmp|oracle|sql|tnls|ftp|sftp|echo|chargen|dns|qotd|motd|finger|rlogin|rexec|discard|daytime).*|' open_ports.txt | less -R" & fi
	if [ -s WeakCiphers.txt ] ; then xterm -title "WeakCiphers from ${OUTPUTDIR}" -e "less -R WeakCiphers.txt" & fi
	if [ -s SNMPCommunityStrings.txt ] ; then xterm -title "SNMPCommunityStrings from ${OUTPUTDIR}" -e "less -R SNMPCommunityStrings.txt" & fi
	cd -
	dialog --title "COMPLETED" --nocancel --pause "Scanning has finished, now time to get root" 10 80 600 ; clear
}
f_exit(){ #this is called upon ESC/Cancel press
	rm /tmp/answer /tmp/threadsout /tmp/exitvalue /tmp/threads
	#kill THREADS xterm window
	echo "1" > /tmp/exitvalue
	exitvalue=1
	kill `ps -o "%p %a" | grep xterm | grep -v color | cut -d" " -f1`
	
	dialog --title "Exiting" --nocancel --pause "See ya" 10 40 2 ; clear
	exit 1
}
### What to run ###
f_setdefaults
f_main
f_cleanup
f_displayresults
#f_debug
exit 0
